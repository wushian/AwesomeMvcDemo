@using AwesomeMvcDemo.Models
@model AwesomeMvcDemo.ViewModels.Input.GridDemoCfgInput
@{
    ViewBag.Title = "Grid Demo - jQuery Ajax Grid with sorting, grouping, paging";
}
<h3>Grid Demo</h3>
Quick overview of the awesome grid.
<div>
    <div class="csettings">
        <form action="@Url.Action("IndexContent", "GridDemo")" method="post" class="ConfigForm">
            <label>Resizable: @Html.Awe().CheckBoxFor(o => o.Resizable)</label>
            <label>Reorderable: @Html.Awe().CheckBoxFor(o => o.Reorderable)</label>
            <label>Groupable: @Html.Awe().CheckBoxFor(o => o.Groupable)</label>
            <label>Sortable: @Html.Awe().CheckBoxFor(o => o.Sortable)</label>
            <label>Single column sorting: @Html.Awe().CheckBoxFor(o => o.SingleColumnSorting)</label>
            <label>Show grouped column: @Html.Awe().CheckBoxFor(o => o.ShowGroupedColumn)</label>
            <label>Use remote data: @Html.Awe().CheckBoxFor(o => o.UseRemoteData)</label>
            <label>Go to page 1 on sort: @Html.Awe().CheckBoxFor(o => o.Page1OnSort)</label>
            <br />
            <label>Height: @Html.Awe().TextBoxFor(o => o.Height).Numeric(o => o.Step(10)).MaxLength(3)</label>
            - set to 0 for autosize
            <br />
            <label>
                Load on parent change:
                @Html.Awe().CheckBoxFor(o => o.LoadOnParentChange)</label>
            - load grid when parent triggers change event ( when you exit/hit enter in the Person|Food textbox ) 
            <br />

            <input type="submit" value="change settings" class="awe-btn awe-il mbtn" />
        </form>
    </div>
</div>

@*begin*@
<div class="bar">
    @Html.Awe().TextBox("txtperson").Placeholder("search for person ...").CssClass("searchtxt")
    @Html.Awe().TextBox("txtfood").Placeholder("search for food ...").CssClass("searchtxt")
    @Html.Awe().AjaxRadioList("oCountry").Url(Url.Action("GetCountries", "Data")).Odropdown().HtmlAttributes(new { style = "min-width:15em;"})
    <button type="button" class="awe-btn mbtn" id="btnSearch" style="display: none;">search</button>
</div>

<div id="demoContent">
    @Html.Partial("IndexContent")
</div>
<script>
    var lunches = @Html.Raw(DemoUtils.Encode(Db.Lunches.Select(o => new
             {
                 o.Id, o.Person, o.Food, o.Location, o.Country, o.Chef, o.Date, DateStr = o.Date.ToShortDateString()
             })));
    
    // func used for grid with client data
    function getGridData(gp) {
        var g = utils.getGridParams(gp);
        
        function filter(list) {
            var foodr = new RegExp(g.food, "i");
            var personr = new RegExp(g.person, "i");
        
            var res = $.grep(list, function(o) {
                return foodr.test(o.Food) && personr.test(o.Person) && (!g.country || g.country == o.Country.Id);
            });    
            return res;
        }
        
        function map(o) { return { Id: o.Id, Person: o.Person, Food: o.Food, Location: o.Location,
            Date: o.DateStr, CountryName: o.Country.Name, ChefName: o.Chef.FirstName + ' ' + o.Chef.LastName }; };
        
        return utils.gridModelBuilder(this, g, lunches, { key:"Id", map:map, filter: filter, ghval:{ Date: "DateStr" }});
    }
</script>

@*code for changing grid settings*@
@Html.Awe().Form().FormClass("ConfigForm").Success("setContent")

<script type="text/javascript">

    var liveSearch = true;
    
    function setContent(o) {
        // use live search only when not using remote data and LoadOnParentChange is true
        liveSearch = !o.Cfg.UseRemoteData && o.Cfg.LoadOnParentChange;
        
        $('#Grid').data('api').clearpersist();
        
        // when grid is initialized it binds to parents' change event (awepch for awe controls)
        $('#txtperson, #txtfood').off('change');
        $('#oCountry').off('awepch');

        // set content (grid reinit)
        $('#demoContent').html(o.Content);
        
        if (!o.Cfg.LoadOnParentChange) {
            $('#btnSearch').show();
        } else {
            $('#btnSearch').hide();
        }
    }

    $(function() {
        $('#txtperson, #txtfood').keyup(function () {
            if (liveSearch)
                $('#Grid').data('api').load();
        });
        
        $('#btnSearch').click(function() {
            $('#Grid').data('api').load();
        });
    });
</script>
@*end*@
<br />
<div class="tabs">
    <div class="expl" data-caption="description">
        Awesome grid with mods for choosing columns, page size and page info, also using columns persitence.
        <ul>
            <li><code>Column.Bind</code> - used to bind this column to the model, it can be bound to one or more properties 
            and subproperties in the model,  examples: "FirstName", "FirstName,LastName", "Country.Name", "Chef.FirstName, Chef.LastName"</li>
            <li><code>Persistence</code> - makes the grid save its state ( collapsed groups, current page, sorting, grouping), it can be None - no persistence, View - view context (will loose state on page refresh); Session - using HTML sessionStorage (will loose state on closing browser); Local - using HTML localStorage ( state will be persisted even after the browser is closed)</li>
            <li><code>ColumnsPersistence</code> - save columns definition (width, visibility)
                <br />
                When developing if you use ColumnsPersistence Session or Local, 
        if you add or remove a column in markup and you refresh the page you won't see the change because you'll get the persisted columns definition,
        to see the columns defined in markup click the grid refresh button, or remove persistence, or call api.clearpersist.<br />
                You can also modify the global peristence key prefix, as shown in utils.js (init method) awe.ppk = "myappv1_".
            </li>
            <li><code>GridModelBuilder&lt;Model&gt;</code> - builds the model of the grid by sorting, paging and grouping the items.</li>
            <li><code>GridModelBuilder&lt;Model&gt;.Map</code> - defines a function that maps the Model to a Dto, this way Column.Name will still be bound the the Model's properties
but for cell values the values from the Dto will be used</li>
            <li><code>GridModelBuilder&lt;Model&gt;.Key</code> - defines a property on which the data will be sorted when there's no sorting, this is needed when using Entity Framework because it does not allow paging if the data is not ordered at least by one column; it's also used for nesting, tree, api</li>
        </ul>
    </div>
    <div data-caption="grid view">
        @Html.Source("GridDemo/IndexContent.cshtml")
    </div>
    <div data-caption="controller">
        @Html.Csource("Awesome/Grid/LunchGridController.cs")
    </div>
    <div data-caption="main view">
        @Html.Source("GridDemo/Index.cshtml")
    </div>
</div>
<br />
<p>
    See also:
</p>
<a href="@Url.Action("Index", "GridClientDataDemo")"> Grid Client Data Demo</a><br/>
@Html.ActionLink("Grid Crud Demo (Popup editing), using PopupForm", "Index", "GridCrudDemo")<br/>
<a href="@Url.Action("Index", "GridNestingDemo")#In-nest-editing-grid">Grid In Nest Editing Demo</a><br/>
@Html.ActionLink("Grid Inline editing demo", "Index", "GridInlineEditDemo")<br/>
@Html.ActionLink("Master Detail Crud Demo", "Index", "MasterDetailCrudDemo")<br/>

