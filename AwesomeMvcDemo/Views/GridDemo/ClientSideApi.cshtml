@model AwesomeMvcDemo.ViewModels.Input.GridDemoSortingCfgInput
@{
    ViewBag.Title = "Grid Client Side API Demo";
}

    <h3>Client Side API</h3>

    <fieldset class="section">
        <legend>call api</legend>
        <textarea id="vs" cols="70" rows="7">$('#ApiDemoGrid').data('api').load(
    {
        group: ['Food', 'Location'],
        sort: [{ Prop: "Date", Sort: 2}], 
        params:{}        
    });
    // Sort 0 = none, 1 = asc, 2 = desc
            </textarea><br />
        <button id="bApi" class="awe-btn">Execute</button>

    </fieldset>
   
    <ul id="samples" class="awe-il">
        <li>
            <button class="awe-btn">Where Food contains Sushi; Sort by Price</button>
            <div class="hidden">$('#ApiDemoGrid').data('api').load(
    {
        group:[],
        sort: [{ Prop: "Price", Sort: 1}],
        params: { Food: 'Sushi' }
    });
    // Sort 0 = none, 1 = asc, 2 = desc
            </div>
        </li>
        <li>
            <button class="awe-btn">Group by Food, Location; Sort by Date Desc</button>
            <div class="hidden">$('#ApiDemoGrid').data('api').load(
    {
        group: ['Food', 'Location'],
        sort: [{ Prop: "Date", Sort: 2}],
        params:{}
    });
    // Sort 0 = none, 1 = asc, 2 = desc
            </div>
        </li>
        <li>
            <button class="awe-btn">Sort Person Desc Price Asc</button>
            <div class="hidden">$('#ApiDemoGrid').data('api').load(
    {
        group:[],
        sort: [{ Prop: "Person", Sort: 2}, { Prop: "Price", Sort: 1}],
        params:{}
    });
            </div>
        </li>
        <li>
            <button class="awe-btn">go to page 3</button>
            <div class="hidden">$('#ApiDemoGrid').data('api').load(
    {
        oparams:{ page: 3 }
    });
// oparams - one time params, sent only once the api is called while params will persist until api with params: {} is called
            </div>
        </li>
        <li>
            <button class="awe-btn">Reset grid</button>
            <div class="hidden">$('#ApiDemoGrid').data('api').reset();
// reset will bring the grid back to the initial state defined in the markup
            </div>
        </li>
    </ul>

<div id="demoContent">
    @*begin*@
    @(Html.Awe().Grid("ApiDemoGrid")
          .Columns(new[]{
              new Column{Bind = "Id", Width = 55},
              new Column{Bind = "Person"},
              new Column{Bind = "Food"},
              new Column{Bind = "Price"},
              new Column{Bind = "Date"},
              new Column{Bind = "Location", Group = true}
          })
          .Height(350)
          .Url(Url.Action("GetItems","LunchGrid")))
    @*end*@
</div>
    
    <div class="tabs code">
        <div data-caption="view">@Html.Source("GridDemo/ClientSideApi.cshtml")</div>
        <div data-caption="controller">@Html.Csource("Awesome/Grid/LunchGridController.cs")</div>
    </div>
    <h3>Events</h3>
    <textarea id="log" rows="7" style="width: 100%">
logging events
</textarea>
    <br />
    <br />
    <div class="expl">
        <p>
            Client side api is called by doing <code>$('#gridId').data('api') </code>and an api method
        </p>
        <ul>
            <li><code>.reset()</code> - will bring the grid back to the initial state defined in the markup</li>
            <li><code>.load({group, sort, params})</code> - loads the grid with the specified grouping rules, sorting and additional parameters,
            if a property is omitted than the grid won't change it's state for that property;
             for example calling <code>.load({group: ['Food', 'Location']})</code> will change the grouping but won't affect the current sorting rules</li>
            <li><code>.clearpersist()</code> - clears the persistence data</li>
        </ul>
    </div>
    
        <script type="text/javascript">
            $(function () {
                $('#bApi').click(function () {
                    eval($('#vs').val());
                });

                $('#samples .awe-btn').click(function () {
                    $('#vs').val($(this).next().html());
                    $('#bApi').click();
                });

                $('#ApiDemoGrid').on('aweload', function (e, data, rd) {
                    $('#log').prepend('aweload handled,\n data: ' + JSON.stringify(data) + "\n request data" + JSON.stringify(rd) + '\n\n');
                }).on('awebeginload', function (e, data) {
                    $('#log').prepend('awebeginload handled,\n request data: ' + JSON.stringify(data) + '\n\n');
                });
            });

            function setContent(o) {
                $('#ApiDemoGrid').data('api').clearpersist();
                $('#demoContent').html(o);
            }
    </script>